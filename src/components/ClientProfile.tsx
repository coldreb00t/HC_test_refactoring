import React, { useState, useEffect } from 'react';
import { 
  Dumbbell, 
  FileText, 
  Calendar,
  Users,
  Apple,
  Activity,
  LineChart,
  Edit2,
  Trash2,
  Plus,
  Camera,
  X,
  Moon,
  Droplets,
  Heart,
  Home
} from 'lucide-react';
import { supabase } from '../lib/supabase';
import toast from 'react-hot-toast';
import { useParams, useNavigate } from 'react-router-dom';
import { ProgramBuilder } from './ProgramBuilder';
import { WorkoutModal } from './WorkoutModal';
import { SidebarLayout } from './SidebarLayout';
import { MedicalDataView } from './MedicalDataView';

type TabType = 'program' | 'nutrition' | 'activity' | 'progress' | 'analysis';

interface NutritionEntry {
  id: string;
  date: string;
  proteins: number;
  fats: number;
  carbs: number;
  water: number;
  photos: string[];
}

interface DailyStats {
  date: string;
  sleep_hours: number;
  water_ml: number;
  mood: 'great' | 'good' | 'neutral' | 'bad' | 'terrible';
  stress_level: number;
  notes: string;
  activities: {
    id: string;
    activity_type: string;
    duration_minutes: number;
  }[];
}

interface Client {
  id: string;
  first_name: string;
  last_name: string;
  email: string;
  phone: string;
  subscription_status: string;
  photo_url?: string;
  programs: Program[];
  daily_stats: DailyStats[];
  nutrition: NutritionEntry[];
}

interface Program {
  id: string;
  title: string;
  description: string;
  created_at: string;
  status: string;
  exercises: Exercise[];
}

interface Exercise {
  id: string;
  name: string;
  description: string;
  video_url?: string;
  exercise_order: number;
  notes?: string;
  sets: {
    set_number: number;
    reps: string;
    weight?: string;
  }[];
}

interface ProgressPhoto {
  url: string;
  filename: string;
  date: string;
}

const tabs = [
  { id: 'program', label: '–ü—Ä–æ–≥—Ä–∞–º–º–∞', icon: Dumbbell },
  { id: 'nutrition', label: '–ü–∏—Ç–∞–Ω–∏–µ', icon: Apple },
  { id: 'activity', label: '–ë—ã—Ç–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', icon: Activity },
  { id: 'progress', label: '–ü—Ä–æ–≥—Ä–µ—Å—Å', icon: LineChart },
  { id: 'analysis', label: '–ê–Ω–∞–ª–∏–∑—ã', icon: FileText }
] as const;

export function ClientProfile() {
  const { clientId } = useParams<{ clientId: string }>();
  const navigate = useNavigate();
  const [activeTab, setActiveTab] = useState<TabType>('program');
  const [client, setClient] = useState<Client | null>(null);
  const [loading, setLoading] = useState(true);
  const [showProgramBuilder, setShowProgramBuilder] = useState(false);
  const [editingProgram, setEditingProgram] = useState<Program | null>(null);
  const [showWorkoutModal, setShowWorkoutModal] = useState(false);
  const [selectedProgram, setSelectedProgram] = useState<Program | null>(null);
  const [selectedDate, setSelectedDate] = useState<Date>(new Date());
  const [progressPhotos, setProgressPhotos] = useState<ProgressPhoto[]>([]);
  const [loadingPhotos, setLoadingPhotos] = useState(false);
  const [clientUserId, setClientUserId] = useState<string | null>(null);
  const [clientRealId, setClientRealId] = useState<string | null>(null);

  const moodEmojis = {
    great: 'üòÑ',
    good: 'üôÇ',
    neutral: 'üòê',
    bad: 'üôÅ',
    terrible: 'üò¢'
  };

  const getStressLevelLabel = (level: number) => {
    if (level <= 2) return '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π';
    if (level <= 4) return '–ù–∏–∑–∫–∏–π';
    if (level <= 6) return '–°—Ä–µ–¥–Ω–∏–π';
    if (level <= 8) return '–í—ã—Å–æ–∫–∏–π';
    return '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π';
  };

  const formatDuration = (minutes: number) => {
    const hours = Math.floor(minutes / 60);
    const remainingMinutes = minutes % 60;
    
    if (hours === 0) {
      return `${minutes} –º–∏–Ω`;
    } else if (remainingMinutes === 0) {
      return `${hours} —á`;
    } else {
      return `${hours} —á ${remainingMinutes} –º–∏–Ω`;
    }
  };

  useEffect(() => {
    if (clientId) {
      console.log(`ClientProfile - clientId from URL: ${clientId}`);
      fetchClientData();
      if (activeTab === 'progress') {
        fetchPhotos();
      }
    }
  }, [clientId, activeTab]);

  const fetchClientData = async () => {
    try {
      setLoading(true);
      console.log(`Fetching client data for ID: ${clientId}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ client_profiles
      const { data: clientProfileData, error: clientProfileError } = await supabase
        .from('client_profiles')
        .select('*, user_id')
        .eq('id', clientId)
        .single();

      if (clientProfileError) {
        console.error('Error fetching client_profiles:', clientProfileError);
      } else {
        console.log('client_profiles data:', clientProfileData);
        setClient(clientProfileData);
        if (clientProfileData.user_id) {
          setClientUserId(clientProfileData.user_id);
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–∫–∂–µ –¥–∞–Ω–Ω—ã–µ –≤ clients
      const { data: clientsData, error: clientsError } = await supabase
        .from('clients')
        .select('id, user_id')
        .eq('id', clientId)
        .single();
        
      if (clientsError) {
        console.log('Trying to find client in clients table by user_id');
        if (clientProfileData?.user_id) {
          const { data: clientsByUserId, error: clientsByUserIdError } = await supabase
            .from('clients')
            .select('id, user_id')
            .eq('user_id', clientProfileData.user_id)
            .single();
            
          if (clientsByUserIdError) {
            console.error('Error finding client by user_id:', clientsByUserIdError);
          } else {
            console.log('Found client by user_id:', clientsByUserId);
            setClientRealId(clientsByUserId.id);
          }
        }
      } else {
        console.log('clients data:', clientsData);
        setClientRealId(clientsData.id);
      }
    } catch (error: any) {
      console.error('Error fetching client data:', error);
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞');
    } finally {
      setLoading(false);
    }
  };

const fetchPhotos = async () => {
  if (!clientId) return;

  try {
    setLoadingPhotos(true);
    console.log(`Fetching photos for client: ${clientId}`);
    
    // 1. –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
    const { data: clientData, error: clientError } = await supabase
      .from('client_profiles')
      .select('id, user_id')
      .eq('id', clientId)
      .single();
      
    if (clientError) {
      console.error('Error fetching client data:', clientError);
      return;
    }
    
    console.log('Client data:', clientData);
    
    // 2. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–∞–ø–æ–∫ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (–ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã)
    const folderPaths = ['progress-photos'];
    
    const photosArray: ProgressPhoto[] = [];
    
    // 3. –î–ª—è –∫–∞–∂–¥–æ–π –ø–∞–ø–∫–∏ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
    for (const folderPath of folderPaths) {
      const { data: files, error: storageError } = await supabase.storage
        .from('client-photos')
        .list(folderPath);
        
      if (storageError) {
        console.error(`Error listing files in ${folderPath}:`, storageError);
        continue;
      }
      
      console.log(`All files in ${folderPath}:`, files);
      
      // 4. –°—Ç—Ä–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é clientId –≤ –Ω–∞—á–∞–ª–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —è–≤–Ω–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ clientId —Å—Ç–æ–∏—Ç –≤ –Ω–∞—á–∞–ª–µ
      const clientIdRegex = new RegExp(`^${clientId}-`);
      const filteredFiles = files?.filter(file => clientIdRegex.test(file.name));
      
      console.log(`Files filtered for client ${clientId}:`, filteredFiles);
      
      if (!filteredFiles || filteredFiles.length === 0) continue;
      
      // 5. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—â–∏–π –º–∞—Å—Å–∏–≤
      for (const file of filteredFiles) {
        try {
          const { data: { publicUrl } } = supabase.storage
            .from('client-photos')
            .getPublicUrl(`${folderPath}/${file.name}`);
          
          // –ü–∞—Ä—Å–∏–º timestamp –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
          // –§–æ—Ä–º–∞—Ç: clientId-timestamp-uuid.ext
          const parts = file.name.split('-');
          
          // –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º timestamp
          let photoDate = new Date();
          if (parts.length >= 2) {
            const timestamp = parseInt(parts[1]);
            if (!isNaN(timestamp) && timestamp > 0) {
              photoDate = new Date(timestamp);
            } else {
              // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∏–∑ –∏–º–µ–Ω–∏
              photoDate = new Date(file.created_at || Date.now());
            }
          }
          
          // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ —Ä—É—Å—Å–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
          const formattedDate = photoDate.toLocaleString('ru-RU', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
          });
          
          photosArray.push({
            url: publicUrl,
            filename: file.name,
            date: formattedDate
          });
        } catch (error) {
          console.error(`Error processing file ${file.name}:`, error);
        }
      }
    }
    
    // 6. –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ –¥–∞—Ç–µ –æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º
    photosArray.sort((a, b) => {
      const dateA = new Date(a.date.split(',')[0].split('.').reverse().join('-'));
      const dateB = new Date(b.date.split(',')[0].split('.').reverse().join('-'));
      return dateB.getTime() - dateA.getTime();
    });
    
    console.log('Final photos array:', photosArray);
    setProgressPhotos(photosArray);
  } catch (error: any) {
    console.error('Error fetching photos:', error);
    toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π');
  } finally {
    setLoadingPhotos(false);
  }
};

const handleDeletePhoto = async (filename: string) => {
  if (!window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ —Ñ–æ—Ç–æ?')) {
    return;
  }

  try {
    const { error } = await supabase.storage
      .from('client-photos')
      .remove([`progress-photos/${filename}`]);

    if (error) throw error;

    setProgressPhotos(photos => photos.filter(photo => photo.filename !== filename));
    toast.success('–§–æ—Ç–æ —É–¥–∞–ª–µ–Ω–æ');
  } catch (error: any) {
    console.error('Error deleting photo:', error);
    toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ');
  }
};

  const menuItems = [
    {
      icon: <Users className="w-5 h-5 min-w-[20px]" />,
      label: '–ö–ª–∏–µ–Ω—Ç—ã',
      onClick: () => navigate('/trainer/clients')
    },
    {
      icon: <Calendar className="w-5 h-5 min-w-[20px]" />,
      label: '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ',
      onClick: () => navigate('/trainer/calendar')
    }
  ];

  const renderProgramContent = () => {
    if (showProgramBuilder) {
      return (
        <ProgramBuilder
          clientId={clientId!}
          programId={editingProgram?.id}
          onSave={() => {
            setShowProgramBuilder(false);
            setEditingProgram(null);
            fetchClientData();
          }}
          onCancel={() => {
            setShowProgramBuilder(false);
            setEditingProgram(null);
          }}
        />
      );
    }

    return (
      <div className="space-y-6">
        <div className="flex justify-between items-center">
          <h3 className="text-xl font-semibold text-gray-800">–ü—Ä–æ–≥—Ä–∞–º–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</h3>
          <button
            onClick={() => {
              setEditingProgram(null);
              setShowProgramBuilder(true);
            }}
            className="px-4 py-2 bg-orange-500 text-white rounded-lg hover:bg-orange-600 transition-colors"
          >
            <Plus className="w-5 h-5 mr-2 inline-block" />
            –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É
          </button>
        </div>

        {client?.programs?.length > 0 ? (
          <div className="space-y-6">
            {client.programs.map((program) => (
              <div key={program.id} className="bg-white rounded-lg shadow-md overflow-hidden">
                <div className="p-6">
                  <div className="flex justify-between items-start mb-4">
                    <div>
                      <h3 className="text-xl font-semibold text-gray-800">{program.title}</h3>
                      <p className="text-gray-600 mt-1">{program.description}</p>
                      <div className="flex items-center mt-2 text-sm text-gray-500">
                        <Calendar className="w-4 h-4 mr-2" />
                        {new Date(program.created_at).toLocaleDateString('ru-RU')}
                        <span className={`ml-4 px-2 py-1 rounded-full ${
                          program.status === 'active'
                            ? 'bg-green-100 text-green-800'
                            : 'bg-gray-100 text-gray-800'
                        }`}>
                          {program.status === 'active' ? '–ê–∫—Ç–∏–≤–Ω–∞' : '–ó–∞–≤–µ—Ä—à–µ–Ω–∞'}
                        </span>
                      </div>
                    </div>
                    <div className="flex space-x-2">
                      <button
                        onClick={() => {
                          setEditingProgram(program);
                          setShowProgramBuilder(true);
                        }}
                        className="p-2 text-gray-400 hover:text-gray-600"
                        title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É"
                      >
                        <Edit2 className="w-5 h-5" />
                      </button>
                      <button
                        onClick={() => {
                          setSelectedProgram(program);
                          setShowWorkoutModal(true);
                        }}
                        className="p-2 text-gray-400 hover:text-gray-600"
                        title="–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"
                      >
                        <Calendar className="w-5 h-5" />
                      </button>
                    </div>
                  </div>

                  <div className="mt-4 overflow-x-auto">
                    <table className="min-w-full divide-y divide-gray-200">
                      <thead className="bg-gray-50">
                        <tr>
                          <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            ‚Ññ
                          </th>
                          <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
                          </th>
                          <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            –ü–æ–¥—Ö–æ–¥—ã
                          </th>
                        </tr>
                      </thead>
                      <tbody className="bg-white divide-y divide-gray-200">
                        {program.exercises.map((exercise, index) => (
                          <tr key={exercise.id} className="hover:bg-gray-50">
                            <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-900">
                              {index + 1}
                            </td>
                            <td className="px-4 py-3 whitespace-nowrap text-sm font-medium text-gray-900">
                              {exercise.name}
                            </td>
                            <td className="px-4 py-3 text-sm text-gray-900">
                              <div className="space-y-1">
                                {exercise.sets.map((set, setIndex) => (
                                  <div key={setIndex} className="flex items-center space-x-2">
                                    <span>–ü–æ–¥—Ö–æ–¥ {set.set_number}:</span>
                                    <span>{set.reps} –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π</span>
                                    {set.weight && (
                                      <span className="text-gray-500">√ó {set.weight} –∫–≥</span>
                                    )}
                                  </div>
                                ))}
                                {exercise.notes && (
                                  <div className="text-gray-500 italic">{exercise.notes}</div>
                                )}
                              </div>
                            </td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                </div>
              </div>
            ))}
          </div>
        ) : (
          <div className="text-center py-12">
            <Dumbbell className="w-12 h-12 text-gray-300 mx-auto mb-4" />
            <p className="text-gray-500">–£ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</p>
          </div>
        )}
      </div>
    );
  };

  const renderNutritionContent = () => {
    if (!client?.nutrition?.length) {
      return (
        <div className="text-center py-12">
          <Apple className="w-12 h-12 text-gray-300 mx-auto mb-4" />
          <p className="text-gray-500">–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –ø–∏—Ç–∞–Ω–∏–∏</p>
        </div>
      );
    }

    return (
      <div className="space-y-6">
        {client.nutrition.map((entry) => (
          <div key={entry.id} className="border rounded-lg overflow-hidden">
            <div className="bg-gray-50 p-4 flex justify-between items-center">
              <div>
                <h3 className="font-medium">{new Date(entry.date).toLocaleDateString('ru-RU')}</h3>
                <div className="mt-1 text-sm text-gray-500 space-x-4">
                  <span>–ë: {entry.proteins}–≥</span>
                  <span>–ñ: {entry.fats}–≥</span>
                  <span>–£: {entry.carbs}–≥</span>
                  <span>–í–æ–¥–∞: {entry.water}–ª</span>
                </div>
              </div>
            </div>
            {entry.photos && entry.photos.length > 0 && (
              <div className="p-4 grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
                {entry.photos.map((photo, index) => {
                  const { data: { publicUrl } } = supabase.storage
                    .from('client-photos')
                    .getPublicUrl(photo);
                    
                  return (
                    <a
                      key={index}
                      href={publicUrl}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="block aspect-square rounded-lg overflow-hidden hover:opacity-90 transition-opacity"
                    >
                      <img
                        src={publicUrl}
                        alt={`–§–æ—Ç–æ –µ–¥—ã ${new Date(entry.date).toLocaleDateString('ru-RU')} #${index + 1}`}
                        className="w-full h-full object-cover"
                      />
                    </a>
                  );
                })}
              </div>
            )}
          </div>
        ))}
      </div>
    );
  };

  const renderActivityContent = () => {
    if (!client?.daily_stats?.length) {
      return (
        <div className="text-center py-12">
          <Home className="w-12 h-12 text-gray-300 mx-auto mb-4" />
          <p className="text-gray-500">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –±—ã—Ç–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</p>
        </div>
      );
    }

    return (
      <div className="space-y-6">
        {client.daily_stats.map((stats) => (
          <div key={stats.date} className="border rounded-lg overflow-hidden">
            <div className="bg-gray-50 px-4 py-3 border-b">
              <h3 className="font-medium">
                {new Date(stats.date).toLocaleDateString('ru-RU', {
                  day: '2-digit',
                  month: 'long',
                  year: 'numeric'
                })}
              </h3>
            </div>

            <div className="p-4">
              {/* Activities */}
              <div className="mb-4">
                <h4 className="text-sm font-medium text-gray-700 mb-2">–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:</h4>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
                  {stats.activities.map((activity) => (
                    <div key={activity.id} className="bg-gray-50 p-2 rounded">
                      <div className="flex items-center text-sm">
                        <Activity className="w-4 h-4 mr-2 text-gray-400" />
                        <span className="flex-1">{activity.activity_type}</span>
                        <span className="text-gray-500">
                          {formatDuration(activity.duration_minutes)}
                        </span>
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              {/* Daily Stats */}
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mt-4">
                <div className="flex items-center text-sm text-gray-600">
                  <Moon className="w-4 h-4 mr-2 text-gray-400" />
                  {stats.sleep_hours} —á–∞—Å–æ–≤ —Å–Ω–∞
                </div>
                <div className="flex items-center text-sm text-gray-600">
                  <Droplets className="w-4 h-4 mr-2 text-gray-400" />
                  {stats.water_ml} –º–ª –≤–æ–¥—ã
                </div>
                <div className="flex items-center text-sm text-gray-600">
                  <span className="mr-2 text-lg">{moodEmojis[stats.mood]}</span>
                  –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
                </div>
                <div className="flex items-center text-sm text-gray-600">
                  <Heart className="w-4 h-4 mr-2 text-gray-400" />
                  –°—Ç—Ä–µ—Å—Å: {getStressLevelLabel(stats.stress_level)} ({stats.stress_level}/10)
                </div>
              </div>

              {stats.notes && (
                <p className="mt-4 text-sm text-gray-600 italic">
                  {stats.notes}
                </p>
              )}
            </div>
          </div>
        ))}
      </div>
    );
  };

  const renderProgressContent = () => {
    if (loadingPhotos) {
      return (
        <div className="flex justify-center items-center h-64">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-orange-500"></div>
        </div>
      );
    }

    if (progressPhotos.length === 0) {
      return (
        <div className="text-center py-12">
          <Camera className="w-12 h-12 text-gray-300 mx-auto mb-4" />
          <p className="text-gray-500">–£ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞</p>
        </div>
      );
    }

    return (
      <div className="space-y-4">
        {progressPhotos.map((photo, index) => (
          <div key={index} className="border rounded-lg overflow-hidden">
            <div className="p-3 bg-gray-50 border-b">
              <div className="flex items-center justify-between">
                <span className="font-medium">{photo.date}</span>
                <button
                  onClick={() => handleDeletePhoto(photo.filename)}
                  className="p-1 text-red-500 hover:text-red-600 rounded-full hover:bg-red-50 transition-colors"
                  title="–£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ"
                >
                  <Trash2 className="w-4 h-4" />
                </button>
              </div>
            </div>
            <div className="p-3">
              <img
                src={photo.url}
                alt={`Progress photo ${photo.date}`}
                className="w-full max-h-[300px] rounded-lg object-contain"
              />
            </div>
          </div>
        ))}
      </div>
    );
  };

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é renderTabContent
const renderTabContent = () => {
  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-orange-500"></div>
      </div>
    );
  }

  if (!client) {
    return (
      <div className="text-center py-8">
        <p className="text-gray-600">–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</p>
      </div>
    );
  }

  switch (activeTab) {
    case 'program':
      return renderProgramContent();
    case 'nutrition':
      return renderNutritionContent();
    case 'activity':
      return renderActivityContent();
    case 'progress':
      return renderProgressContent();
    case 'analysis':
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
      return <MedicalDataView clientId={clientId!} />;
    default:
      return null;
  }
};

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-100 p-6">
        <div className="flex justify-center items-center h-64">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-orange-500"></div>
        </div>
      </div>
    );
  }

  if (!client) {
    return (
      <div className="min-h-screen bg-gray-100 p-6">
        <div className="text-center py-8">
          <p className="text-gray-600">–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</p>
        </div>
      </div>
    );
  }

  return (
    <SidebarLayout
      title="HARDCASE"
      menuItems={menuItems}
      backTo="/trainer/clients"
    >
      {/* Client Header */}
      <div className="bg-white shadow-md p-4 md:p-6 mb-4 md:mb-6">
        <div className="flex flex-wrap items-center gap-4">
          <div className="w-12 h-12 md:w-16 md:h-16 bg-orange-100 rounded-full flex items-center justify-center flex-shrink-0">
            <span className="text-xl md:text-2xl font-bold text-orange-500">
              {client.first_name[0]}{client.last_name[0]}
            </span>
          </div>
          <div className="flex-1 min-w-0">
            <h2 className="text-xl md:text-2xl font-bold text-gray-800 truncate">
              {client.first_name} {client.last_name}
            </h2>
            <p className="text-gray-600 truncate">{client.email}</p>
          </div>
          <div className="flex-shrink-0">
            <span className={`px-3 py-1 rounded-full text-sm ${
              client.subscription_status === 'active'
                ? 'bg-green-100 text-green-800'
                : 'bg-yellow-100 text-yellow-800'
            }`}>
              {client.subscription_status === 'active' ? '–ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞' : '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞'}
            </span>
          </div>
        </div>
      </div>

      {/* Tabs */}
      <div className="bg-white shadow-md mb-4 md:mb-6 sticky top-0 z-10">
        <div className="overflow-x-auto scrollbar-hide">
          <div className="flex p-2 md:p-3 space-x-2 min-w-max">
            {tabs.map((tab) => {
              const Icon = tab.icon;
              return (
                <button
                  key={tab.id}
                  onClick={() => setActiveTab(tab.id)}
                  className={`flex items-center px-3 md:px-4 py-2 rounded-lg transition-colors whitespace-nowrap ${
                    activeTab === tab.id
                      ? 'bg-orange-500 text-white'
                      : 'text-gray-600 hover:bg-gray-100'
                  }`}
                >
                  <Icon className="w-5 h-5 mr-2 flex-shrink-0" />
                  <span className="text-sm md:text-base">{tab.label}</span>
                </button>
              );
            })}
          </div>
        </div>
      </div>

      {/* Content Area */}
      <div className="px-4 md:px-6 pb-6">
        {renderTabContent()}
      </div>

      {/* Workout Modal */}
      {showWorkoutModal && (
        <WorkoutModal
          isOpen={showWorkoutModal}
          onClose={() => {
            setShowWorkoutModal(false);
            setSelectedProgram(null);
          }}
          selectedDate={selectedDate}
          onWorkoutCreated={fetchClientData}
          workout={null}
          program={selectedProgram}
          clientId={clientId}
        />
      )}
    </SidebarLayout>
  );
}
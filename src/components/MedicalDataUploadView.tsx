import React, { useState, useRef } from 'react';
import { FileText, Upload, X, Plus } from 'lucide-react';
import { supabase } from '../lib/supabase';
import { useNavigate, useParams } from 'react-router-dom';
import toast from 'react-hot-toast';

interface FilePreview {
  file: File;
  preview: string | null;
  type: string;
}

interface MedicalDataUploadViewProps {
  onClose: () => void;
  onUploadSuccess: () => void;
}

export function MedicalDataUploadView({ onClose, onUploadSuccess }: MedicalDataUploadViewProps) {
  const { clientId } = useParams<{ clientId: string }>();
  const [selectedFiles, setSelectedFiles] = useState<FilePreview[]>([]);
  const [uploading, setUploading] = useState(false);
  const [category, setCategory] = useState('blood_test'); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏
  const [description, setDescription] = useState('');
  const [date, setDate] = useState(new Date().toISOString().split('T')[0]);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const navigate = useNavigate();

  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files) {
      const files = Array.from(e.target.files);
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤
      const validFiles = files.filter(file => {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ (25MB –º–∞–∫—Å–∏–º—É–º)
        if (file.size > 25 * 1024 * 1024) {
          toast.error(`${file.name} –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ä–∞–∑–º–µ—Ä 25MB`);
          return false;
        }

        return true;
      });

      // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
      Promise.all(
        validFiles.map(file => new Promise<FilePreview>((resolve) => {
          // –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é
          if (file.type.startsWith('image/')) {
            const reader = new FileReader();
            reader.onloadend = () => {
              resolve({
                file,
                preview: reader.result as string,
                type: 'image'
              });
            };
            reader.readAsDataURL(file);
          } else {
            // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤ (PDF, –¥–æ–∫—É–º–µ–Ω—Ç—ã) –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∫–æ–Ω–∫—É
            resolve({
              file,
              preview: null,
              type: file.type
            });
          }
        }))
      ).then(previews => {
        setSelectedFiles(prev => [...prev, ...previews]);
      });
    }
  };

  const handleUpload = async () => {
    if (selectedFiles.length === 0) {
      toast.error('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã');
      return;
    }

    if (!description.trim()) {
      toast.error('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ');
      return;
    }

    try {
      setUploading(true);
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      const { data: { user }, error: userError } = await supabase.auth.getUser();
      if (userError) throw userError;
      
      if (!clientId) {
        toast.error('ID –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      console.log('Starting medical data upload for client:', clientId);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤
      const timestamp = Date.now();
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
      const uploadResults = await Promise.all(
        selectedFiles.map(async ({ file }, index) => {
          const fileExt = file.name.split('.').pop() || '';
          const uniqueId = crypto.randomUUID();
          // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å clientId –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏
          const fileName = `${clientId}-${timestamp + index}-${uniqueId}.${fileExt}`;
          const filePath = `medical-data/${fileName}`;

          console.log(`Uploading file to ${filePath}`);

          const { error: uploadError, data } = await supabase.storage
            .from('client-data')
            .upload(filePath, file, {
              cacheControl: '3600',
              upsert: false
            });

          if (uploadError) throw uploadError;

          return {
            file_path: filePath,
            file_name: fileName,
            original_name: file.name,
            file_type: file.type,
            file_size: file.size
          };
        })
      );

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î –æ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
      const { error: dbError } = await supabase
        .from('client_medical_data')
        .insert({
          client_id: clientId,
          category: category,
          description: description,
          date: date,
          files: uploadResults,
          created_by: user?.id,
          created_at: new Date().toISOString()
        });

      if (dbError) throw dbError;

      toast.success('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
      onUploadSuccess();
      onClose();
    } catch (error: any) {
      console.error('Error uploading medical data:', error);
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: ' + (error.message || error));
    } finally {
      setUploading(false);
    }
  };

  const handleRemoveFile = (index: number) => {
    setSelectedFiles(prev => prev.filter((_, i) => i !== index));
  };

  const getFileIcon = (fileType: string) => {
    if (fileType.startsWith('image/')) return 'üñºÔ∏è';
    if (fileType.includes('pdf')) return 'üìÑ';
    if (fileType.includes('word') || fileType.includes('document')) return 'üìù';
    if (fileType.includes('spreadsheet') || fileType.includes('excel')) return 'üìä';
    return 'üìÅ';
  };

  return (
    <div className="bg-white rounded-xl shadow-md p-6">
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-xl font-semibold text-gray-800">
          –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        </h2>
        <button
          onClick={onClose}
          className="text-gray-600 hover:text-gray-800"
        >
          <X className="w-5 h-5" />
        </button>
      </div>

      <form className="space-y-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            –ö–∞—Ç–µ–≥–æ—Ä–∏—è
          </label>
          <select
            value={category}
            onChange={(e) => setCategory(e.target.value)}
            className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent"
          >
            <option value="blood_test">–ê–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏</option>
            <option value="urine_test">–ê–Ω–∞–ª–∏–∑ –º–æ—á–∏</option>
            <option value="mri">–ú–†–¢</option>
            <option value="xray">–†–µ–Ω—Ç–≥–µ–Ω</option>
            <option value="ultrasound">–£–ó–ò</option>
            <option value="ecg">–≠–ö–ì</option>
            <option value="consultation">–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –≤—Ä–∞—á–∞</option>
            <option value="other">–î—Ä—É–≥–æ–µ</option>
          </select>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            –î–∞—Ç–∞
          </label>
          <input
            type="date"
            value={date}
            onChange={(e) => setDate(e.target.value)}
            className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent"
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            –û–ø–∏—Å–∞–Ω–∏–µ
          </label>
          <textarea
            value={description}
            onChange={(e) => setDescription(e.target.value)}
            rows={3}
            className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent"
            placeholder="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞"
            required
          />
        </div>

        {/* –ü—Ä–µ–≤—å—é —Ñ–∞–π–ª–æ–≤ */}
        <div className="space-y-4">
          {selectedFiles.map((fileData, index) => (
            <div key={index} className="bg-gray-50 p-3 rounded-lg relative flex items-center">
              <div className="flex-shrink-0 mr-3 text-2xl">
                {fileData.preview ? (
                  <img 
                    src={fileData.preview} 
                    alt="Preview" 
                    className="w-12 h-12 object-cover rounded" 
                  />
                ) : (
                  <span>{getFileIcon(fileData.type)}</span>
                )}
              </div>
              <div className="flex-1 min-w-0">
                <p className="text-sm font-medium text-gray-900 truncate">
                  {fileData.file.name}
                </p>
                <p className="text-xs text-gray-500">
                  {(fileData.file.size / 1024).toFixed(1)} KB ‚Ä¢ {fileData.file.type || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç'}
                </p>
              </div>
              <button
                type="button"
                onClick={() => handleRemoveFile(index)}
                className="ml-2 text-red-500 hover:text-red-700"
              >
                <X className="w-5 h-5" />
              </button>
            </div>
          ))}

          {/* –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤ */}
          <div
            onClick={() => fileInputRef.current?.click()}
            className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center cursor-pointer hover:border-orange-500 transition-colors"
          >
            <Upload className="w-8 h-8 mx-auto text-gray-400 mb-2" />
            <p className="text-gray-600">–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª—ã</p>
            <p className="text-sm text-gray-500 mt-1">JPG, PNG, PDF –¥–æ 25MB</p>
          </div>

          <input
            ref={fileInputRef}
            type="file"
            multiple
            onChange={handleFileSelect}
            className="hidden"
          />
        </div>

        <div className="flex justify-end space-x-4">
          <button
            type="button"
            onClick={onClose}
            className="px-4 py-2 text-gray-600 hover:text-gray-800"
          >
            –û—Ç–º–µ–Ω–∞
          </button>
          <button
            type="button"
            onClick={handleUpload}
            disabled={uploading || selectedFiles.length === 0}
            className="px-6 py-2 bg-orange-500 text-white rounded-lg hover:bg-orange-600 transition-colors disabled:opacity-50"
          >
            {uploading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
          </button>
        </div>
      </form>
    </div>
  );
}